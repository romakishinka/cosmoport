

  ПРОШЕЛ ПЕРВЫЙ ТЕСТ

    @RequestMapping(value = "/rest/ships", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ResponseEntity<List<Ship>> getShipsList(@RequestParam(value = "name", required = false) String name,
                                                   @RequestParam(value = "planet", required = false) String planet,
                                                   @RequestParam(value = "shipType", required = false) ShipType shipType,
                                                   @RequestParam(value = "after", required = false) Long after,
                                                   @RequestParam(value = "before", required = false) Long before,
                                                   @RequestParam(value = "isUsed", required = false) Boolean isUsed,
                                                   @RequestParam(value = "maxSpeed", required = false) Double maxSpeed,
                                                   @RequestParam(value = "minSpeed", required = false) Double minSpeed,
                                                   @RequestParam(value = "minCrewSize", required = false) Integer minCrewSize,
                                                   @RequestParam(value = "maxCrewSize", required = false) Integer maxCrewSize,
                                                   @RequestParam(value = "minRating", required = false) Double minRating,
                                                   @RequestParam(value = "maxRating", required = false) Double maxRating,
                                                   @RequestParam(value = "order", required = false) ShipOrder order,
                                                   @RequestParam(value = "pageNumber", required = false, defaultValue = "0") Integer pageNumber,
                                                   @RequestParam(value = "pageSize", required = false, defaultValue = "3") Integer pageSize) {


        System.out.println(name);
        List <Ship> shipList = shipService.getAll();
        List <Ship> betweenList = new ArrayList<>();
        List <Ship> resultList = new ArrayList<>();

        if(name != null) {
            for (Ship ship : shipList) {
                if (ship.getName().contains(name)) {
                    System.out.println(ship.getName());
                    betweenList.add(ship);
                }
            }
            for (int i = 0; i < pageSize; i++) {            //paging
                resultList.add(betweenList.get(i));
            }
        }
        else { for (int i = 0; i < pageSize; i++) {            //paging
            resultList.add(shipList.get(i));
        }}





        return new ResponseEntity<>(resultList, HttpStatus.OK);
    }









НЕДОДЕЛЫННЫЙ ВАРИНАТ С ПЛАНЕТ И ИМЯ

    @RequestMapping(value = "/rest/ships", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ResponseEntity<List<Ship>> getShipsList(@RequestParam(value = "name", required = false) String name,
                                                   @RequestParam(value = "planet", required = false) String planet,
                                                   @RequestParam(value = "shipType", required = false) ShipType shipType,
                                                   @RequestParam(value = "after", required = false) Long after,
                                                   @RequestParam(value = "before", required = false) Long before,
                                                   @RequestParam(value = "isUsed", required = false) Boolean isUsed,
                                                   @RequestParam(value = "maxSpeed", required = false) Double maxSpeed,
                                                   @RequestParam(value = "minSpeed", required = false) Double minSpeed,
                                                   @RequestParam(value = "minCrewSize", required = false) Integer minCrewSize,
                                                   @RequestParam(value = "maxCrewSize", required = false) Integer maxCrewSize,
                                                   @RequestParam(value = "minRating", required = false) Double minRating,
                                                   @RequestParam(value = "maxRating", required = false) Double maxRating,
                                                   @RequestParam(value = "order", required = false) ShipOrder order,
                                                   @RequestParam(value = "pageNumber", required = false, defaultValue = "0") Integer pageNumber,
                                                   @RequestParam(value = "pageSize", required = false, defaultValue = "3") Integer pageSize) {


        System.out.println(name);
        List <Ship> shipList = shipService.getAll();
        List <Ship> betweenList = new ArrayList<>();
        Set <Ship> set = new TreeSet<>();
        List <Ship> resultList = new ArrayList<>();

        if(name != null) {
            for (Ship ship : shipList) {
                if (ship.getName().contains(name)) {
                    System.out.println(ship.getName());
                    betweenList.add(ship);
                }
            }
            for (int i = 0; i < pageSize; i++) {            //paging
                System.out.println("do paging");
                resultList.add(betweenList.get(i));
            }
        }
        if(planet != null) {
            for(Ship ship : shipList) {
                System.out.println(ship.getPlanet());
                if (ship.getPlanet().contains(planet)) {
                    System.out.println("Macth");
                    betweenList.add(ship);
                }
            }
            for (int i = 0; i < pageSize; i++) {  //paging
                System.out.println("do paging");
                resultList.add(betweenList.get(i));
            }
        }



//        else { for (int i = 0; i < pageSize; i++) {
//            System.out.println("do paging");           //paging
//            resultList.add(shipList.get(i));
//        }}






        return new ResponseEntity<>(resultList, HttpStatus.OK);
    }















    ПАЙДЖИНГ И КОЛ-ВО


            if(name == null && planet == null) {
                if(pageNumber == 0) {
                    for (int i = 0; i < pageSize; i++) //paging
                        resultList.add(shipList.get(i));
                }
                else if (pageNumber == 1) {
                    for(int i = pageSize; i < shipList.size(); i++)
                        resultList.add(shipList.get(i));
                }
            }














ПЕРВЫЕ ТРИ ТЕСТА ВЫПОЛНЕНЫ

    @RequestMapping(value = "/rest/ships", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ResponseEntity<List<Ship>> getShipsList(@RequestParam(value = "name", required = false) String name,
                                                   @RequestParam(value = "planet", required = false) String planet,
                                                   @RequestParam(value = "shipType", required = false) ShipType shipType,
                                                   @RequestParam(value = "after", required = false) Long after,
                                                   @RequestParam(value = "before", required = false) Long before,
                                                   @RequestParam(value = "isUsed", required = false) Boolean isUsed,
                                                   @RequestParam(value = "maxSpeed", required = false) Double maxSpeed,
                                                   @RequestParam(value = "minSpeed", required = false) Double minSpeed,
                                                   @RequestParam(value = "minCrewSize", required = false) Integer minCrewSize,
                                                   @RequestParam(value = "maxCrewSize", required = false) Integer maxCrewSize,
                                                   @RequestParam(value = "minRating", required = false) Double minRating,
                                                   @RequestParam(value = "maxRating", required = false) Double maxRating,
                                                   @RequestParam(value = "order", required = false) ShipOrder order,
                                                   @RequestParam(value = "pageNumber", required = false, defaultValue = "0") Integer pageNumber,
                                                   @RequestParam(value = "pageSize", required = false, defaultValue = "3") Integer pageSize) {


        System.out.println(name);
        List <Ship> shipList = shipService.getAll();
        List <Ship> betweenList = new ArrayList<>();
        Set <Ship> set = new TreeSet<>();
        List <Ship> resultList = new ArrayList<>();

        if(name != null) {
            for (Ship ship : shipList) {
                if (ship.getName().contains(name)) {
                    System.out.println(ship.getName());
                    betweenList.add(ship);
                }
            }
            if(pageNumber == 0) {
                for (int i = 0; i < pageSize; i++) {  //paging
                    resultList.add(betweenList.get(i));
                }
            }
            else if (pageNumber == 1) {
                for (int i = pageSize; i < betweenList.size(); i++)
                    resultList.add(betweenList.get(i));
            }
        }
        if(planet != null) {
            for(Ship ship : shipList) {
                System.out.println(ship.getPlanet());
                if (ship.getPlanet().contains(planet)) {
                    System.out.println("Macth");
                    betweenList.add(ship);
                }
            }
            if(pageNumber == 0) {
                for (int i = 0; i < pageSize; i++) {  //paging
                    resultList.add(betweenList.get(i));
                }
            }
            else if (pageNumber == 1) {
                System.out.println("paging 1");
                for (int i = pageSize; i < betweenList.size(); i++)
                    resultList.add(betweenList.get(i));
            }
        }

        if(shipType != null) {
            for (Ship ship : shipList) {
                if(ship.getShipType().equals(shipType)){
                    betweenList.add(ship);
                }
            }
            if(pageNumber == 0) {
                for (int i = 0; i < pageSize; i++) {  //paging
                    resultList.add(betweenList.get(i));
                }
            }
            else if (pageNumber == 1) {
                for (int i = pageSize; i < betweenList.size(); i++)
                    resultList.add(betweenList.get(i));
            }
        }



        if(name == null && planet == null) {
            if(pageNumber == 0) {
                for (int i = 0; i < pageSize; i++) //paging
                    resultList.add(shipList.get(i));
            }
            else if (pageNumber == 1) {
                for(int i = pageSize; i < shipList.size(); i++)
                    resultList.add(shipList.get(i));
            }
        }


        return new ResponseEntity<>(resultList, HttpStatus.OK);
    }


















    ISUSED METHOD
            if(isUsed != null){
                for (Ship ship: shipList) {
                    if(ship.getUsed() == isUsed) {
                        System.out.println(ship.getName() + " " + ship.getUsed());
                        betweenList.add(ship);
                    }
                }
                if(pageNumber == 0) {
                    for (int i = 0; i < pageSize; i++) {  //paging
                        resultList.add(betweenList.get(i));
                    }
                }
                else if (pageNumber == 1) {
                    for (int i = pageSize; i < betweenList.size(); i++)
                        resultList.add(betweenList.get(i));
                }
            }













            LAST SAVE


                @RequestMapping(value = "/rest/ships", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
                public ResponseEntity<List<Ship>> getShipsList(@RequestParam(value = "name", required = false) String name,
                                                               @RequestParam(value = "planet", required = false) String planet,
                                                               @RequestParam(value = "shipType", required = false) ShipType shipType,
                                                               @RequestParam(value = "after", required = false) Long after,
                                                               @RequestParam(value = "before", required = false) Long before,
                                                               @RequestParam(value = "isUsed", required = false) Boolean isUsed,
                                                               @RequestParam(value = "maxSpeed", required = false) Double maxSpeed,
                                                               @RequestParam(value = "minSpeed", required = false) Double minSpeed,
                                                               @RequestParam(value = "minCrewSize", required = false) Integer minCrewSize,
                                                               @RequestParam(value = "maxCrewSize", required = false) Integer maxCrewSize,
                                                               @RequestParam(value = "minRating", required = false) Double minRating,
                                                               @RequestParam(value = "maxRating", required = false) Double maxRating,
                                                               @RequestParam(value = "order", required = false) ShipOrder order,
                                                               @RequestParam(value = "pageNumber", required = false, defaultValue = "0") Integer pageNumber,
                                                               @RequestParam(value = "pageSize", required = false, defaultValue = "13") Integer pageSize) {


                    System.out.println(name);
                    List <Ship> shipList = shipService.getAll();
                    List <Ship> betweenList = new ArrayList<>();
                    List <Ship> resultList = new ArrayList<>();

                    if(name != null) {
                        for (Ship ship : shipList) {
                            if (ship.getName().contains(name)) {
                                betweenList.add(ship);
                            }
                        }
                        if(pageNumber == 0) {
                            for (int i = 0; i < pageSize; i++) {  //paging
                                resultList.add(betweenList.get(i));
                            }
                        }
                        else if (pageNumber == 1) {
                            for (int i = pageSize; i < betweenList.size(); i++)
                                resultList.add(betweenList.get(i));
                        }
                    }
                    if(planet != null) {
                        for(Ship ship : shipList) {
                            if (ship.getPlanet().contains(planet)) {
                                betweenList.add(ship);
                            }
                        }
                        if(pageNumber == 0) {
                            for (int i = 0; i < pageSize; i++) {  //paging
                                resultList.add(betweenList.get(i));
                            }
                        }
                        else if (pageNumber == 1) {
                            for (int i = pageSize; i < betweenList.size(); i++)
                                resultList.add(betweenList.get(i));
                        }
                    }

                    if(shipType != null) {
                        System.out.println("do smt");
                        for (Ship ship : shipList) {
                            if(ship.getShipType().equals(shipType)){
                                betweenList.add(ship);
                            }
                        }
                        if(pageNumber == 0) {
                            for (int i = 0; i < pageSize; i++) {  //paging
                                resultList.add(betweenList.get(i));
                            }
                        }
                        else if (pageNumber == 1) {
                            for (int i = pageSize; i < betweenList.size(); i++)
                                resultList.add(betweenList.get(i));
                        }
                    }

                    if(isUsed != null){
                        for (Ship ship: shipList) {
                            if(ship.getUsed() == isUsed) {
                                System.out.println(ship.getName() + " " + ship.getUsed());
                                betweenList.add(ship);
                            }
                        }
                        if(pageNumber == 0) {
                            for (int i = 0; i < pageSize; i++) {  //paging
                                resultList.add(betweenList.get(i));
                            }
                        }
                        else if (pageNumber == 1) {
                            for (int i = pageSize; i < betweenList.size(); i++)
                                resultList.add(betweenList.get(i));
                        }
                    }
                    System.out.println(betweenList.size());

                    if (after != null && before != null) {
                        List<Ship> listDate =  new ArrayList<>();
                        Date dateAfter = new Date(after);
                        Date dateBefore = new Date(before);
                        for (Ship ship : betweenList) {

                            if(ship.getProdDate().after(dateAfter) && ship.getProdDate().before(dateBefore)) {
                                System.out.println(ship.getName() +" "+ ship.getProdDate());
                                listDate.add(ship);
                            }

                        }
                        if(pageNumber == 0) {
                            for (int i = 0; i < pageSize; i++) {  //paging
                                resultList.add(betweenList.get(i));
                            }
                        }
                        else if (pageNumber == 1) {
                            for (int i = pageSize; i < betweenList.size(); i++)
                                resultList.add(betweenList.get(i));
                        }
                    }

                    System.out.println(betweenList.size());

                    if(name == null && planet == null && shipType == null && isUsed == null && after == null && before == null) {                  // убрать в отдельный метод
                        if(pageNumber == 0) {
                            for (int i = 0; i < pageSize; i++) //paging
                                resultList.add(shipList.get(i));
                        }
                        else if (pageNumber == 1) {
                            for(int i = pageSize; i < shipList.size(); i++)
                                resultList.add(shipList.get(i));
                        }
                    }



                    LinkedHashSet <Ship> hashSet = new LinkedHashSet<>(resultList);   // убрать в отдельный метод
                    resultList = new ArrayList<>(hashSet);
                    return new ResponseEntity<>(resultList, HttpStatus.OK);
                }






4 tests work

    @RequestMapping(value = "/rest/ships", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ResponseEntity<List<Ship>> getShipsList(@RequestParam(value = "name", required = false) String name,
                                                   @RequestParam(value = "planet", required = false) String planet,
                                                   @RequestParam(value = "shipType", required = false) ShipType shipType,
                                                   @RequestParam(value = "after", required = false) Long after,
                                                   @RequestParam(value = "before", required = false) Long before,
                                                   @RequestParam(value = "isUsed", required = false) Boolean isUsed,
                                                   @RequestParam(value = "maxSpeed", required = false) Double maxSpeed,
                                                   @RequestParam(value = "minSpeed", required = false) Double minSpeed,
                                                   @RequestParam(value = "minCrewSize", required = false) Integer minCrewSize,
                                                   @RequestParam(value = "maxCrewSize", required = false) Integer maxCrewSize,
                                                   @RequestParam(value = "minRating", required = false) Double minRating,
                                                   @RequestParam(value = "maxRating", required = false) Double maxRating,
                                                   @RequestParam(value = "order", required = false) ShipOrder order,
                                                   @RequestParam(value = "pageNumber", required = false, defaultValue = "0") Integer pageNumber,
                                                   @RequestParam(value = "pageSize", required = false, defaultValue = "3") Integer pageSize) {


        System.out.println(name);
        List <Ship> shipList = shipService.getAll();
        List <Ship> betweenList = new ArrayList<>();
        List <Ship> resultList = new ArrayList<>();


        if(name == null && planet == null && shipType == null && isUsed == null && after == null && before == null) {        // убрать в отдельный метод
            if(pageNumber == 0) {
                for (int i = 0; i < pageSize; i++) //paging
                    resultList.add(shipList.get(i));
            }
            else if (pageNumber == 1) {
                for(int i = pageSize; i < shipList.size(); i++)
                    resultList.add(shipList.get(i));
            }

            LinkedHashSet <Ship> hashSet = new LinkedHashSet<>(resultList);   // убрать в отдельный метод
            resultList = new ArrayList<>(hashSet);
            return new ResponseEntity<>(resultList, HttpStatus.OK);
        }


        if(name != null) {
            for (Ship ship : shipList) {
                if (ship.getName().contains(name)) {
                    betweenList.add(ship);
                }
            }

        }
        if(planet != null) {
            for(Ship ship : shipList) {
                if (ship.getPlanet().contains(planet)) {
                    betweenList.add(ship);
                }
            }
        }

        if(shipType != null) {
            System.out.println("do smt");
            for (Ship ship : shipList) {
                if(ship.getShipType().equals(shipType)){
                    betweenList.add(ship);
                }
            }
        }

        if(isUsed != null){
            for (Ship ship: shipList) {
                if(ship.getUsed() == isUsed) {
                    System.out.println(ship.getName() + " " + ship.getUsed());
                    betweenList.add(ship);
                }
            }
        }


        if (after != null && before != null) {
            List<Ship> listDate =  new ArrayList<>();
            Date dateAfter = new Date(after);
            Date dateBefore = new Date(before);
            for (Ship ship : betweenList) {

                if(ship.getProdDate().after(dateAfter) && ship.getProdDate().before(dateBefore)) {
                    System.out.println(ship.getName() +" "+ ship.getProdDate());
                    listDate.add(ship);
                    betweenList = new ArrayList<>(listDate);
                }
            }
        }

        System.out.println(betweenList.size());


        if(pageNumber == 0) {
            for (int i = 0; i < pageSize; i++) {  //paging
                resultList.add(betweenList.get(i));
            }
        }
        else if (pageNumber == 1) {
            for (int i = pageSize; i < betweenList.size(); i++)
                resultList.add(betweenList.get(i));
        }

        LinkedHashSet <Ship> hashSet = new LinkedHashSet<>(resultList);   // убрать в отдельный метод
        resultList = new ArrayList<>(hashSet);
        return new ResponseEntity<>(resultList, HttpStatus.OK);
    }





NEWPAGING!!!!!!!!!!!!!!!!!!!!!!
        if(pageNumber == 0) {
            if (pageSize > betweenList.size()) {
                for (int i = 0; i < betweenList.size(); i++) {  //paging
                    if (betweenList.get(i) != null)
                        resultList.add(betweenList.get(i));
                }
            }
            else {
                for (int i = 0; i < pageSize; i++) {
                    if (betweenList.get(i) != null)
                        resultList.add(betweenList.get(i));
                }
            }

        }
        else if (pageNumber == 1) {
            if (pageSize > betweenList.size()) {
                for (int i = 0; i < betweenList.size(); i++) {  //paging
                    if (betweenList.get(i) != null)
                        resultList.add(betweenList.get(i));
                }
            }
            else {
                for (int i = 0; i < pageSize; i++) {
                    if (betweenList.get(i) != null)
                        resultList.add(betweenList.get(i));
                }
            }
        }

























        !!!!!!!!!!!!


            @RequestMapping(value = "/rest/ships", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
            public ResponseEntity<List<Ship>> getShipsList(@RequestParam(value = "name", required = false) String name,
                                                           @RequestParam(value = "planet", required = false) String planet,
                                                           @RequestParam(value = "shipType", required = false) ShipType shipType,
                                                           @RequestParam(value = "after", required = false) Long after,
                                                           @RequestParam(value = "before", required = false) Long before,
                                                           @RequestParam(value = "isUsed", required = false) Boolean isUsed,
                                                           @RequestParam(value = "maxSpeed", required = false) Double maxSpeed,
                                                           @RequestParam(value = "minSpeed", required = false) Double minSpeed,
                                                           @RequestParam(value = "minCrewSize", required = false) Integer minCrewSize,
                                                           @RequestParam(value = "maxCrewSize", required = false) Integer maxCrewSize,
                                                           @RequestParam(value = "minRating", required = false) Double minRating,
                                                           @RequestParam(value = "maxRating", required = false) Double maxRating,
                                                           @RequestParam(value = "order", required = false) ShipOrder order,
                                                           @RequestParam(value = "pageNumber", required = false, defaultValue = "0") Integer pageNumber,
                                                           @RequestParam(value = "pageSize", required = false, defaultValue = "3") Integer pageSize) {


                System.out.println(name);
                List <Ship> shipList = shipService.getAll();
                List <Ship> betweenList = new ArrayList<>();
                List <Ship> resultList = new ArrayList<>();


                if(name == null && planet == null && shipType == null && isUsed == null && after == null && before == null) {        // убрать в отдельный метод
                    if(pageNumber == 0) {
                        for (int i = 0; i < pageSize; i++) //paging
                            resultList.add(shipList.get(i));
                    }
                    else if (pageNumber == 1) {
                        for(int i = pageSize; i < shipList.size(); i++)
                            resultList.add(shipList.get(i));
                    }

                    LinkedHashSet <Ship> hashSet = new LinkedHashSet<>(resultList);   // убрать в отдельный метод
                    resultList = new ArrayList<>(hashSet);
                    return new ResponseEntity<>(resultList, HttpStatus.OK);
                }


                if(name != null) {
                    for (Ship ship : shipList) {
                        if (ship.getName().contains(name)) {
                            betweenList.add(ship);
                        }
                    }

                }
                if(planet != null) {
                    for(Ship ship : shipList) {
                        if (ship.getPlanet().contains(planet)) {
                            betweenList.add(ship);
                        }
                    }
                }

                if(shipType != null) {
                    System.out.println("do smt");
                    for (Ship ship : shipList) {
                        if(ship.getShipType().equals(shipType)){
                            betweenList.add(ship);
                        }
                    }
                }

                if(isUsed != null){
                    for (Ship ship: shipList) {
                        if(ship.getUsed() == isUsed) {
                            System.out.println(ship.getName() + " " + ship.getUsed());
                            betweenList.add(ship);
                        }
                    }
                }


                if (after != null && before != null) {
                    List<Ship> listDate =  new ArrayList<>();
                    Date dateAfter = new Date(after);
                    Date dateBefore = new Date(before);
                    for (Ship ship : betweenList) {
                        if(ship.getProdDate().after(dateAfter) && ship.getProdDate().before(dateBefore)) {
                            System.out.println(ship.getName() +" "+ ship.getProdDate());
                            listDate.add(ship);
                            betweenList = new ArrayList<>(listDate);
                        }
                    }
                }


                if(minSpeed != null && maxSpeed != null) {
                    List<Ship> listSpeed = new ArrayList<>();
                    for(Ship ship : betweenList){
                        if(ship.getSpeed() >= minSpeed && ship.getSpeed() <= maxSpeed) {
                            System.out.println(ship.getName() +" "+ ship.getSpeed());
                            listSpeed.add(ship);
                            betweenList = new ArrayList<>(listSpeed);
                        }
                    }
                }

                if(minCrewSize != null && maxCrewSize != null) {
                    List<Ship> listCrewSize = new ArrayList<>();
                    for(Ship ship : betweenList){
                        if (ship.getCrewSize() >= minCrewSize && ship.getCrewSize() <= maxCrewSize){
                            System.out.println(ship.getName() + " " + ship.getCrewSize());
                            listCrewSize.add(ship);
                            betweenList = new ArrayList<>(listCrewSize);
                        }
                    }
                }

                if(minRating != null && maxRating != null) {
                    List<Ship> listRating = new ArrayList<>();
                    for(Ship ship : betweenList){
                        if (ship.getRating() >= minRating && ship.getRating() <= maxRating){
                            System.out.println(ship.getName() + " " + ship.getRating());
                            listRating.add(ship);
                            betweenList = new ArrayList<>(listRating);
                        }
                    }
                }




                if(pageNumber == 0) {
                    if (pageSize > betweenList.size()) {
                        for (int i = 0; i < betweenList.size(); i++) {  //paging
                            if (betweenList.get(i) != null)
                                resultList.add(betweenList.get(i));
                        }
                    }
                    else {
                        for (int i = 0; i < pageSize; i++) {
                            if (betweenList.get(i) != null)
                                resultList.add(betweenList.get(i));
                        }
                    }

                }
                else if (pageNumber == 1) {
                    for (int i = pageSize; i < betweenList.size(); i++)
                        resultList.add(betweenList.get(i));
                }

                LinkedHashSet <Ship> hashSet = new LinkedHashSet<>(resultList);   // убрать в отдельный метод
                resultList = new ArrayList<>(hashSet);
                return new ResponseEntity<>(resultList, HttpStatus.OK);
            }


























            !!!!!!!!!!!!!!
               @RequestMapping(value = "/rest/ships", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
                public ResponseEntity<List<Ship>> getShipsList(@RequestParam(value = "name", required = false) String name,
                                                               @RequestParam(value = "planet", required = false) String planet,
                                                               @RequestParam(value = "shipType", required = false) ShipType shipType,
                                                               @RequestParam(value = "after", required = false) Long after,
                                                               @RequestParam(value = "before", required = false) Long before,
                                                               @RequestParam(value = "isUsed", required = false) Boolean isUsed,
                                                               @RequestParam(value = "maxSpeed", required = false) Double maxSpeed,
                                                               @RequestParam(value = "minSpeed", required = false) Double minSpeed,
                                                               @RequestParam(value = "minCrewSize", required = false) Integer minCrewSize,
                                                               @RequestParam(value = "maxCrewSize", required = false) Integer maxCrewSize,
                                                               @RequestParam(value = "minRating", required = false) Double minRating,
                                                               @RequestParam(value = "maxRating", required = false) Double maxRating,
                                                               @RequestParam(value = "order", required = false) ShipOrder order,
                                                               @RequestParam(value = "pageNumber", required = false, defaultValue = "0") Integer pageNumber,
                                                               @RequestParam(value = "pageSize", required = false, defaultValue = "3") Integer pageSize) {


                    System.out.println(name);
            //        List <Ship> shipList = shipService.getAll();
                    List <Ship> shipList = shipService.getAll();
                    List <Ship> resultList = new ArrayList<>();


                    if(name == null && planet == null && shipType == null && isUsed == null && after == null && before == null) {        // убрать в отдельный метод
                        if(pageNumber == 0) {
                            for (int i = 0; i < pageSize; i++) //paging
                                resultList.add(shipList.get(i));
                        }
                        else if (pageNumber == 1) {
                            for(int i = pageSize; i < shipList.size(); i++)
                                resultList.add(shipList.get(i));
                        }

                        LinkedHashSet <Ship> hashSet = new LinkedHashSet<>(resultList);   // убрать в отдельный метод
                        resultList = new ArrayList<>(hashSet);
                        return new ResponseEntity<>(resultList, HttpStatus.OK);
                    }


                    if(name != null)
                        shipList = shipList.stream().filter(ship -> ship.getName().contains(name)).collect(Collectors.toList());
                    if(planet != null)
                        shipList = shipList.stream().filter(ship -> ship.getPlanet().contains(planet)).collect(Collectors.toList());
                    if(shipType !=null)
                        shipList = shipList.stream().filter(ship -> ship.getShipType().equals(shipType)).collect(Collectors.toList());
                    if(isUsed != null)
                        shipList = shipList.stream().filter(ship -> ship.getUsed() == isUsed).collect(Collectors.toList());
                    if(after != null)
                        shipList = shipList.stream().filter(ship -> ship.getProdDate().after(new Date(after))).collect(Collectors.toList());
                    if(before != null)
                        shipList = shipList.stream().filter(ship -> ship.getProdDate().before(new Date(before))).collect(Collectors.toList());
                    if(minSpeed != null)
                        shipList = shipList.stream().filter(ship -> ship.getSpeed() >= minSpeed).collect(Collectors.toList());
                    if(maxSpeed != null)
                        shipList = shipList.stream().filter(ship -> ship.getSpeed() <= maxSpeed).collect(Collectors.toList());
                    if(minCrewSize != null)
                        shipList = shipList.stream().filter(ship -> ship.getCrewSize() >= minCrewSize).collect(Collectors.toList());
                    if(maxCrewSize != null)
                        shipList = shipList.stream().filter(ship -> ship.getCrewSize() <= maxCrewSize).collect(Collectors.toList());
                    if(minRating != null)
                        shipList = shipList.stream().filter(ship -> ship.getRating() >= minRating).collect(Collectors.toList());
                    if(maxRating != null)
                        shipList = shipList.stream().filter(ship -> ship.getRating() <= maxRating).collect(Collectors.toList());



                    if(pageNumber == 0) {
                        if (pageSize > shipList.size()) {
                            for (int i = 0; i < shipList.size(); i++) {  //paging
                                if (shipList.get(i) != null)
                                    resultList.add(shipList.get(i));
                            }
                        }
                        else {
                            for (int i = 0; i < pageSize; i++) {
                                if (shipList.get(i) != null)
                                    resultList.add(shipList.get(i));
                            }
                        }

                    }
                    else if (pageNumber == 1) {
                        for (int i = pageSize; i < shipList.size(); i++)
                            resultList.add(shipList.get(i));
                    }

                    LinkedHashSet <Ship> hashSet = new LinkedHashSet<>(resultList);   // убрать в отдельный метод
                    resultList = new ArrayList<>(hashSet);
                    return new ResponseEntity<>(resultList, HttpStatus.OK);
                }





















ПРОХОДИТ ВСЕ ТЕСТЫ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    @RequestMapping(value = "/rest/ships", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ResponseEntity<List<Ship>> getShipsList(@RequestParam(value = "name", required = false) String name,
                                                   @RequestParam(value = "planet", required = false) String planet,
                                                   @RequestParam(value = "shipType", required = false) ShipType shipType,
                                                   @RequestParam(value = "after", required = false) Long after,
                                                   @RequestParam(value = "before", required = false) Long before,
                                                   @RequestParam(value = "isUsed", required = false) Boolean isUsed,
                                                   @RequestParam(value = "maxSpeed", required = false) Double maxSpeed,
                                                   @RequestParam(value = "minSpeed", required = false) Double minSpeed,
                                                   @RequestParam(value = "minCrewSize", required = false) Integer minCrewSize,
                                                   @RequestParam(value = "maxCrewSize", required = false) Integer maxCrewSize,
                                                   @RequestParam(value = "minRating", required = false) Double minRating,
                                                   @RequestParam(value = "maxRating", required = false) Double maxRating,
                                                   @RequestParam(value = "order", required = false) ShipOrder order,
                                                   @RequestParam(value = "pageNumber", required = false, defaultValue = "0") Integer pageNumber,
                                                   @RequestParam(value = "pageSize", required = false, defaultValue = "3") Integer pageSize
                                                   ) {



        List <Ship> shipList = shipService.getAll();
        List <Ship> resultList;  //!


        if (name == null && planet == null && shipType == null && isUsed == null && after == null && before == null) {

            resultList = shipService.pagingShipsWithoutParameters(shipList, pageNumber, pageSize);

            return new ResponseEntity<>(resultList, HttpStatus.OK);
        }

        else {

            if (name != null)
                shipList = shipList.stream().filter(ship -> ship.getName().contains(name)).collect(Collectors.toList());

            if (planet != null)
                shipList = shipList.stream().filter(ship -> ship.getPlanet().contains(planet)).collect(Collectors.toList());

            if (shipType != null)
                shipList = shipList.stream().filter(ship -> ship.getShipType().equals(shipType)).collect(Collectors.toList());

            if (isUsed != null)
                shipList = shipList.stream().filter(ship -> ship.getUsed() == isUsed).collect(Collectors.toList());

            if (after != null)
                shipList = shipList.stream().filter(ship -> ship.getProdDate().after(new Date(after))).collect(Collectors.toList());

            if (before != null)
                shipList = shipList.stream().filter(ship -> ship.getProdDate().before(new Date(before))).collect(Collectors.toList());

            if (minSpeed != null)
                shipList = shipList.stream().filter(ship -> ship.getSpeed() >= minSpeed).collect(Collectors.toList());

            if (maxSpeed != null)
                shipList = shipList.stream().filter(ship -> ship.getSpeed() <= maxSpeed).collect(Collectors.toList());

            if (minCrewSize != null)
                shipList = shipList.stream().filter(ship -> ship.getCrewSize() >= minCrewSize).collect(Collectors.toList());

            if (maxCrewSize != null)
                shipList = shipList.stream().filter(ship -> ship.getCrewSize() <= maxCrewSize).collect(Collectors.toList());

            if (minRating != null)
                shipList = shipList.stream().filter(ship -> ship.getRating() >= minRating).collect(Collectors.toList());

            if (maxRating != null)
                shipList = shipList.stream().filter(ship -> ship.getRating() <= maxRating).collect(Collectors.toList());

            if(order != null) {
                shipList = shipService.orderList(order, shipList);
            }

            resultList = shipService.pagingShipsWithParameters(shipList, pageNumber, pageSize);

            resultList = resultList.stream().distinct().collect(Collectors.toList());
            return new ResponseEntity<>(resultList, HttpStatus.OK);
        }
    }



















    public ResponseEntity<Ship> createShip (@RequestParam(value = "name", required = false) String name,
                                            @RequestParam(value = "planet", required = false) String planet,
                                            @RequestParam(value = "shipType", required = false) ShipType shipType,
                                            @RequestParam(value = "prodDate", required = false) Long prodDate,
                                            @RequestParam(value = "isUsed", defaultValue = "false", required = false) Boolean isUsed,
                                            @RequestParam(value = "speed", required = false) Double speed,
                                            @RequestParam(value = "crewSize", required = false) Integer crewSize)


















        @RequestMapping(value = "/rest/ships", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
        public ResponseEntity<Ship> createShip (@RequestBody Ship ship) {
            if (ship.getName().equals("null") || ship.getPlanet() == null || ship.getShipType() == null ||
                    ship.getProdDate() == null || ship.getSpeed() == 0.00 || ship.getCrewSize() == null) {
                return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
            }


            String name = ship.getName();
            String planet = ship.getPlanet();
            ShipType shipType = ship.getShipType();
            Date prodDate = ship.getProdDate();
            Integer crewSize = ship.getCrewSize();
            Boolean isUsed = ship.getUsed();
            Double speed = ship.getSpeed();
            Double rating = ship.getRating();

            double coefficient = isUsed ? 0.5 : 1;


            if (name.length() > 50 || name.equals("")) {
                System.out.println("smt");
                return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
            }


            if (planet.length() > 50) {
                System.out.println("smt");
                return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
            }


            if (name.isEmpty() && planet.isEmpty()) {
                return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
            }


            if (crewSize < 1 || crewSize > 9999) {
                return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
            }


            if (speed < 0.01 || speed > 0.99) {
                return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
            }


            if (prodDate.before(new Date(26174880000000L)) || prodDate.after(new Date(33081264000000L))) {
                return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
            }


            Calendar calendar = Calendar.getInstance();
            calendar.setTime(prodDate);
            rating = (80 * speed * coefficient) / (3019 - calendar.get(Calendar.YEAR) + 1);

            ship.setRating(rating);


            shipService.createShip(ship);
            return new ResponseEntity<>(ship, HttpStatus.OK);

        }